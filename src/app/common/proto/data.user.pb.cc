// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace antalk {
namespace data {
namespace user {

namespace {

const ::google::protobuf::Descriptor* GetUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserInfoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserInfoRes_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* GetUserInfoService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2euser_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_data_2euser_2eproto() {
  protobuf_AddDesc_data_2euser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.user.proto");
  GOOGLE_CHECK(file != NULL);
  GetUserInfoReq_descriptor_ = file->message_type(0);
  static const int GetUserInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoReq, saas_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoReq, user_id_),
  };
  GetUserInfoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetUserInfoReq_descriptor_,
      GetUserInfoReq::default_instance_,
      GetUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetUserInfoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoReq, _internal_metadata_),
      -1);
  GetUserInfoRes_descriptor_ = file->message_type(1);
  static const int GetUserInfoRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRes, user_info_),
  };
  GetUserInfoRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetUserInfoRes_descriptor_,
      GetUserInfoRes::default_instance_,
      GetUserInfoRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRes, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetUserInfoRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserInfoRes, _internal_metadata_),
      -1);
  GetUserInfoService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2euser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetUserInfoReq_descriptor_, &GetUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetUserInfoRes_descriptor_, &GetUserInfoRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2euser_2eproto() {
  delete GetUserInfoReq::default_instance_;
  delete GetUserInfoReq_reflection_;
  delete GetUserInfoRes::default_instance_;
  delete GetUserInfoRes_reflection_;
}

void protobuf_AddDesc_data_2euser_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_data_2euser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::im::base::protobuf_AddDesc_im_2ebase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017data.user.proto\022\020antalk.data.user\032\rim."
    "base.proto\"E\n\016GetUserInfoReq\022\021\n\tuser_nam"
    "e\030\001 \002(\t\022\017\n\007saas_id\030\002 \001(\r\022\017\n\007user_id\030\003 \001("
    "\r\"6\n\016GetUserInfoRes\022$\n\tuser_info\030\001 \002(\0132\021"
    ".im.base.UserInfo2g\n\022GetUserInfoService\022"
    "Q\n\013GetUserInfo\022 .antalk.data.user.GetUse"
    "rInfoReq\032 .antalk.data.user.GetUserInfoR"
    "esB\022\n\rcom.antalk.pb\200\001\001", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.user.proto", &protobuf_RegisterTypes);
  GetUserInfoReq::default_instance_ = new GetUserInfoReq();
  GetUserInfoRes::default_instance_ = new GetUserInfoRes();
  GetUserInfoReq::default_instance_->InitAsDefaultInstance();
  GetUserInfoRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2euser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2euser_2eproto {
  StaticDescriptorInitializer_data_2euser_2eproto() {
    protobuf_AddDesc_data_2euser_2eproto();
  }
} static_descriptor_initializer_data_2euser_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserInfoReq::kUserNameFieldNumber;
const int GetUserInfoReq::kSaasIdFieldNumber;
const int GetUserInfoReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserInfoReq::GetUserInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:antalk.data.user.GetUserInfoReq)
}

void GetUserInfoReq::InitAsDefaultInstance() {
}

GetUserInfoReq::GetUserInfoReq(const GetUserInfoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:antalk.data.user.GetUserInfoReq)
}

void GetUserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  saas_id_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoReq::~GetUserInfoReq() {
  // @@protoc_insertion_point(destructor:antalk.data.user.GetUserInfoReq)
  SharedDtor();
}

void GetUserInfoReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoReq_descriptor_;
}

const GetUserInfoReq& GetUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2euser_2eproto();
  return *default_instance_;
}

GetUserInfoReq* GetUserInfoReq::default_instance_ = NULL;

GetUserInfoReq* GetUserInfoReq::New(::google::protobuf::Arena* arena) const {
  GetUserInfoReq* n = new GetUserInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUserInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antalk.data.user.GetUserInfoReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetUserInfoReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetUserInfoReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(saas_id_, user_id_);
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:antalk.data.user.GetUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "antalk.data.user.GetUserInfoReq.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_saas_id;
        break;
      }

      // optional uint32 saas_id = 2;
      case 2: {
        if (tag == 16) {
         parse_saas_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saas_id_)));
          set_has_saas_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:antalk.data.user.GetUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:antalk.data.user.GetUserInfoReq)
  return false;
#undef DO_
}

void GetUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:antalk.data.user.GetUserInfoReq)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "antalk.data.user.GetUserInfoReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // optional uint32 saas_id = 2;
  if (has_saas_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->saas_id(), output);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:antalk.data.user.GetUserInfoReq)
}

::google::protobuf::uint8* GetUserInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:antalk.data.user.GetUserInfoReq)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "antalk.data.user.GetUserInfoReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional uint32 saas_id = 2;
  if (has_saas_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->saas_id(), target);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antalk.data.user.GetUserInfoReq)
  return target;
}

int GetUserInfoReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:antalk.data.user.GetUserInfoReq)
  int total_size = 0;

  // required string user_name = 1;
  if (has_user_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 saas_id = 2;
    if (has_saas_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->saas_id());
    }

    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:antalk.data.user.GetUserInfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetUserInfoReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:antalk.data.user.GetUserInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:antalk.data.user.GetUserInfoReq)
    MergeFrom(*source);
  }
}

void GetUserInfoReq::MergeFrom(const GetUserInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antalk.data.user.GetUserInfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_saas_id()) {
      set_saas_id(from.saas_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:antalk.data.user.GetUserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoReq::CopyFrom(const GetUserInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antalk.data.user.GetUserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserInfoReq::Swap(GetUserInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserInfoReq::InternalSwap(GetUserInfoReq* other) {
  user_name_.Swap(&other->user_name_);
  std::swap(saas_id_, other->saas_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoReq_descriptor_;
  metadata.reflection = GetUserInfoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUserInfoReq

// required string user_name = 1;
bool GetUserInfoReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUserInfoReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUserInfoReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUserInfoReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
 const ::std::string& GetUserInfoReq::user_name() const {
  // @@protoc_insertion_point(field_get:antalk.data.user.GetUserInfoReq.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUserInfoReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:antalk.data.user.GetUserInfoReq.user_name)
}
 void GetUserInfoReq::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:antalk.data.user.GetUserInfoReq.user_name)
}
 void GetUserInfoReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:antalk.data.user.GetUserInfoReq.user_name)
}
 ::std::string* GetUserInfoReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:antalk.data.user.GetUserInfoReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUserInfoReq::release_user_name() {
  // @@protoc_insertion_point(field_release:antalk.data.user.GetUserInfoReq.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUserInfoReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:antalk.data.user.GetUserInfoReq.user_name)
}

// optional uint32 saas_id = 2;
bool GetUserInfoReq::has_saas_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUserInfoReq::set_has_saas_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUserInfoReq::clear_has_saas_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUserInfoReq::clear_saas_id() {
  saas_id_ = 0u;
  clear_has_saas_id();
}
 ::google::protobuf::uint32 GetUserInfoReq::saas_id() const {
  // @@protoc_insertion_point(field_get:antalk.data.user.GetUserInfoReq.saas_id)
  return saas_id_;
}
 void GetUserInfoReq::set_saas_id(::google::protobuf::uint32 value) {
  set_has_saas_id();
  saas_id_ = value;
  // @@protoc_insertion_point(field_set:antalk.data.user.GetUserInfoReq.saas_id)
}

// optional uint32 user_id = 3;
bool GetUserInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUserInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUserInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUserInfoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
 ::google::protobuf::uint32 GetUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:antalk.data.user.GetUserInfoReq.user_id)
  return user_id_;
}
 void GetUserInfoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:antalk.data.user.GetUserInfoReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserInfoRes::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserInfoRes::GetUserInfoRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:antalk.data.user.GetUserInfoRes)
}

void GetUserInfoRes::InitAsDefaultInstance() {
  user_info_ = const_cast< ::im::base::UserInfo*>(&::im::base::UserInfo::default_instance());
}

GetUserInfoRes::GetUserInfoRes(const GetUserInfoRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:antalk.data.user.GetUserInfoRes)
}

void GetUserInfoRes::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoRes::~GetUserInfoRes() {
  // @@protoc_insertion_point(destructor:antalk.data.user.GetUserInfoRes)
  SharedDtor();
}

void GetUserInfoRes::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
  }
}

void GetUserInfoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserInfoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoRes_descriptor_;
}

const GetUserInfoRes& GetUserInfoRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2euser_2eproto();
  return *default_instance_;
}

GetUserInfoRes* GetUserInfoRes::default_instance_ = NULL;

GetUserInfoRes* GetUserInfoRes::New(::google::protobuf::Arena* arena) const {
  GetUserInfoRes* n = new GetUserInfoRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUserInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:antalk.data.user.GetUserInfoRes)
  if (has_user_info()) {
    if (user_info_ != NULL) user_info_->::im::base::UserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetUserInfoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:antalk.data.user.GetUserInfoRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .im.base.UserInfo user_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:antalk.data.user.GetUserInfoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:antalk.data.user.GetUserInfoRes)
  return false;
#undef DO_
}

void GetUserInfoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:antalk.data.user.GetUserInfoRes)
  // required .im.base.UserInfo user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:antalk.data.user.GetUserInfoRes)
}

::google::protobuf::uint8* GetUserInfoRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:antalk.data.user.GetUserInfoRes)
  // required .im.base.UserInfo user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antalk.data.user.GetUserInfoRes)
  return target;
}

int GetUserInfoRes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:antalk.data.user.GetUserInfoRes)
  int total_size = 0;

  // required .im.base.UserInfo user_info = 1;
  if (has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:antalk.data.user.GetUserInfoRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetUserInfoRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserInfoRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:antalk.data.user.GetUserInfoRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:antalk.data.user.GetUserInfoRes)
    MergeFrom(*source);
  }
}

void GetUserInfoRes::MergeFrom(const GetUserInfoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antalk.data.user.GetUserInfoRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::im::base::UserInfo::MergeFrom(from.user_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetUserInfoRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:antalk.data.user.GetUserInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserInfoRes::CopyFrom(const GetUserInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antalk.data.user.GetUserInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void GetUserInfoRes::Swap(GetUserInfoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserInfoRes::InternalSwap(GetUserInfoRes* other) {
  std::swap(user_info_, other->user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUserInfoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserInfoRes_descriptor_;
  metadata.reflection = GetUserInfoRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUserInfoRes

// required .im.base.UserInfo user_info = 1;
bool GetUserInfoRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUserInfoRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUserInfoRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUserInfoRes::clear_user_info() {
  if (user_info_ != NULL) user_info_->::im::base::UserInfo::Clear();
  clear_has_user_info();
}
const ::im::base::UserInfo& GetUserInfoRes::user_info() const {
  // @@protoc_insertion_point(field_get:antalk.data.user.GetUserInfoRes.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
::im::base::UserInfo* GetUserInfoRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::im::base::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:antalk.data.user.GetUserInfoRes.user_info)
  return user_info_;
}
::im::base::UserInfo* GetUserInfoRes::release_user_info() {
  // @@protoc_insertion_point(field_release:antalk.data.user.GetUserInfoRes.user_info)
  clear_has_user_info();
  ::im::base::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void GetUserInfoRes::set_allocated_user_info(::im::base::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:antalk.data.user.GetUserInfoRes.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GetUserInfoService::~GetUserInfoService() {}

const ::google::protobuf::ServiceDescriptor* GetUserInfoService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* GetUserInfoService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserInfoService_descriptor_;
}

void GetUserInfoService::GetUserInfo(::google::protobuf::RpcController* controller,
                         const ::antalk::data::user::GetUserInfoReq*,
                         ::antalk::data::user::GetUserInfoRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserInfo() not implemented.");
  done->Run();
}

void GetUserInfoService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), GetUserInfoService_descriptor_);
  switch(method->index()) {
    case 0:
      GetUserInfo(controller,
             ::google::protobuf::down_cast<const ::antalk::data::user::GetUserInfoReq*>(request),
             ::google::protobuf::down_cast< ::antalk::data::user::GetUserInfoRes*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GetUserInfoService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::antalk::data::user::GetUserInfoReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GetUserInfoService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::antalk::data::user::GetUserInfoRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GetUserInfoService_Stub::GetUserInfoService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GetUserInfoService_Stub::GetUserInfoService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GetUserInfoService_Stub::~GetUserInfoService_Stub() {
  if (owns_channel_) delete channel_;
}

void GetUserInfoService_Stub::GetUserInfo(::google::protobuf::RpcController* controller,
                              const ::antalk::data::user::GetUserInfoReq* request,
                              ::antalk::data::user::GetUserInfoRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace user
}  // namespace data
}  // namespace antalk

// @@protoc_insertion_point(global_scope)
