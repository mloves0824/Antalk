// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.login.proto

#ifndef PROTOBUF_im_2elogin_2eproto__INCLUDED
#define PROTOBUF_im_2elogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "im.base.pb.h"
// @@protoc_insertion_point(includes)

namespace im {
namespace login {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_im_2elogin_2eproto();
void protobuf_AssignDesc_im_2elogin_2eproto();
void protobuf_ShutdownFile_im_2elogin_2eproto();

class IMLoginReq;
class IMLoginRes;

// ===================================================================

class IMLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.login.IMLoginReq) */ {
 public:
  IMLoginReq();
  virtual ~IMLoginReq();

  IMLoginReq(const IMLoginReq& from);

  inline IMLoginReq& operator=(const IMLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMLoginReq& default_instance();

  void Swap(IMLoginReq* other);

  // implements Message ----------------------------------------------

  inline IMLoginReq* New() const { return New(NULL); }

  IMLoginReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMLoginReq& from);
  void MergeFrom(const IMLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // required .im.base.UserStatType online_status = 3;
  bool has_online_status() const;
  void clear_online_status();
  static const int kOnlineStatusFieldNumber = 3;
  ::im::base::UserStatType online_status() const;
  void set_online_status(::im::base::UserStatType value);

  // required .im.base.ClientType client_type = 4;
  bool has_client_type() const;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  ::im::base::ClientType client_type() const;
  void set_client_type(::im::base::ClientType value);

  // optional string client_version = 5;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:im.login.IMLoginReq)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_client_version();
  inline void clear_has_client_version();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  int online_status_;
  int client_type_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  friend void  protobuf_AddDesc_im_2elogin_2eproto();
  friend void protobuf_AssignDesc_im_2elogin_2eproto();
  friend void protobuf_ShutdownFile_im_2elogin_2eproto();

  void InitAsDefaultInstance();
  static IMLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class IMLoginRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:im.login.IMLoginRes) */ {
 public:
  IMLoginRes();
  virtual ~IMLoginRes();

  IMLoginRes(const IMLoginRes& from);

  inline IMLoginRes& operator=(const IMLoginRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMLoginRes& default_instance();

  void Swap(IMLoginRes* other);

  // implements Message ----------------------------------------------

  inline IMLoginRes* New() const { return New(NULL); }

  IMLoginRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMLoginRes& from);
  void MergeFrom(const IMLoginRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMLoginRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_time = 1;
  bool has_server_time() const;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::uint32 server_time() const;
  void set_server_time(::google::protobuf::uint32 value);

  // required .im.base.ResultType result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::im::base::ResultType result_code() const;
  void set_result_code(::im::base::ResultType value);

  // optional string result_string = 3;
  bool has_result_string() const;
  void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  const ::std::string& result_string() const;
  void set_result_string(const ::std::string& value);
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  ::std::string* mutable_result_string();
  ::std::string* release_result_string();
  void set_allocated_result_string(::std::string* result_string);

  // optional .im.base.UserStatType online_status = 4;
  bool has_online_status() const;
  void clear_online_status();
  static const int kOnlineStatusFieldNumber = 4;
  ::im::base::UserStatType online_status() const;
  void set_online_status(::im::base::UserStatType value);

  // optional .im.base.UserInfo user_info = 5;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  const ::im::base::UserInfo& user_info() const;
  ::im::base::UserInfo* mutable_user_info();
  ::im::base::UserInfo* release_user_info();
  void set_allocated_user_info(::im::base::UserInfo* user_info);

  // @@protoc_insertion_point(class_scope:im.login.IMLoginRes)
 private:
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_time_;
  int result_code_;
  ::google::protobuf::internal::ArenaStringPtr result_string_;
  ::im::base::UserInfo* user_info_;
  int online_status_;
  friend void  protobuf_AddDesc_im_2elogin_2eproto();
  friend void protobuf_AssignDesc_im_2elogin_2eproto();
  friend void protobuf_ShutdownFile_im_2elogin_2eproto();

  void InitAsDefaultInstance();
  static IMLoginRes* default_instance_;
};
// ===================================================================

class IMLoginService_Stub;

class IMLoginService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline IMLoginService() {};
 public:
  virtual ~IMLoginService();

  typedef IMLoginService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void IMLogin(::google::protobuf::RpcController* controller,
                       const ::im::login::IMLoginReq* request,
                       ::im::login::IMLoginRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IMLoginService);
};

class IMLoginService_Stub : public IMLoginService {
 public:
  IMLoginService_Stub(::google::protobuf::RpcChannel* channel);
  IMLoginService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~IMLoginService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements IMLoginService ------------------------------------------

  void IMLogin(::google::protobuf::RpcController* controller,
                       const ::im::login::IMLoginReq* request,
                       ::im::login::IMLoginRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IMLoginService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginReq

// required string username = 1;
inline bool IMLoginReq::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginReq::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& IMLoginReq::username() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.username)
}
inline void IMLoginReq::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginReq.username)
}
inline void IMLoginReq::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginReq.username)
}
inline ::std::string* IMLoginReq::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginReq.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_username() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginReq.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginReq.username)
}

// required string password = 2;
inline bool IMLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.password)
}
inline void IMLoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginReq.password)
}
inline void IMLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginReq.password)
}
inline ::std::string* IMLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginReq.password)
}

// required .im.base.UserStatType online_status = 3;
inline bool IMLoginReq::has_online_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginReq::set_has_online_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginReq::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginReq::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::im::base::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.online_status)
  return static_cast< ::im::base::UserStatType >(online_status_);
}
inline void IMLoginReq::set_online_status(::im::base::UserStatType value) {
  assert(::im::base::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.online_status)
}

// required .im.base.ClientType client_type = 4;
inline bool IMLoginReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::im::base::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.client_type)
  return static_cast< ::im::base::ClientType >(client_type_);
}
inline void IMLoginReq::set_client_type(::im::base::ClientType value) {
  assert(::im::base::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.client_type)
}

// optional string client_version = 5;
inline bool IMLoginReq::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginReq::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginReq::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginReq::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
inline const ::std::string& IMLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.client_version)
}
inline void IMLoginReq::set_client_version(const char* value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginReq.client_version)
}
inline void IMLoginReq::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginReq.client_version)
}
inline ::std::string* IMLoginReq::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginReq.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginReq.client_version)
  clear_has_client_version();
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginReq.client_version)
}

// -------------------------------------------------------------------

// IMLoginRes

// required uint32 server_time = 1;
inline bool IMLoginRes::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginRes::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginRes::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginRes::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.server_time)
  return server_time_;
}
inline void IMLoginRes::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.server_time)
}

// required .im.base.ResultType result_code = 2;
inline bool IMLoginRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginRes::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::im::base::ResultType IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.result_code)
  return static_cast< ::im::base::ResultType >(result_code_);
}
inline void IMLoginRes::set_result_code(::im::base::ResultType value) {
  assert(::im::base::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.result_code)
}

// optional string result_string = 3;
inline bool IMLoginRes::has_result_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginRes::set_has_result_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginRes::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result_string();
}
inline const ::std::string& IMLoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.result_string)
  return result_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginRes::set_result_string(const ::std::string& value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.result_string)
}
inline void IMLoginRes::set_result_string(const char* value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginRes.result_string)
}
inline void IMLoginRes::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginRes.result_string)
}
inline ::std::string* IMLoginRes::mutable_result_string() {
  set_has_result_string();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginRes::release_result_string() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginRes.result_string)
  clear_has_result_string();
  return result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    set_has_result_string();
  } else {
    clear_has_result_string();
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginRes.result_string)
}

// optional .im.base.UserStatType online_status = 4;
inline bool IMLoginRes::has_online_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginRes::set_has_online_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginRes::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginRes::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::im::base::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.online_status)
  return static_cast< ::im::base::UserStatType >(online_status_);
}
inline void IMLoginRes::set_online_status(::im::base::UserStatType value) {
  assert(::im::base::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.online_status)
}

// optional .im.base.UserInfo user_info = 5;
inline bool IMLoginRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginRes::clear_user_info() {
  if (user_info_ != NULL) user_info_->::im::base::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::im::base::UserInfo& IMLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::im::base::UserInfo* IMLoginRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::im::base::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginRes.user_info)
  return user_info_;
}
inline ::im::base::UserInfo* IMLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginRes.user_info)
  clear_has_user_info();
  ::im::base::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMLoginRes::set_allocated_user_info(::im::base::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginRes.user_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_im_2elogin_2eproto__INCLUDED
