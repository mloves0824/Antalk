// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace im {
namespace login {

namespace {

const ::google::protobuf::Descriptor* IMLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMLoginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMLoginRes_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* IMLoginService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_im_2elogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_im_2elogin_2eproto() {
  protobuf_AddDesc_im_2elogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "im.login.proto");
  GOOGLE_CHECK(file != NULL);
  IMLoginReq_descriptor_ = file->message_type(0);
  static const int IMLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, client_version_),
  };
  IMLoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMLoginReq_descriptor_,
      IMLoginReq::default_instance_,
      IMLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(IMLoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, _internal_metadata_),
      -1);
  IMLoginRes_descriptor_ = file->message_type(1);
  static const int IMLoginRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, result_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, user_info_),
  };
  IMLoginRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMLoginRes_descriptor_,
      IMLoginRes::default_instance_,
      IMLoginRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, _has_bits_[0]),
      -1,
      -1,
      sizeof(IMLoginRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, _internal_metadata_),
      -1);
  IMLoginService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_im_2elogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMLoginReq_descriptor_, &IMLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMLoginRes_descriptor_, &IMLoginRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_im_2elogin_2eproto() {
  delete IMLoginReq::default_instance_;
  delete IMLoginReq_reflection_;
  delete IMLoginRes::default_instance_;
  delete IMLoginRes_reflection_;
}

void protobuf_AddDesc_im_2elogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_im_2elogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::im::base::protobuf_AddDesc_im_2ebase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016im.login.proto\022\010im.login\032\rim.base.prot"
    "o\"\240\001\n\nIMLoginReq\022\020\n\010username\030\001 \002(\t\022\020\n\010pa"
    "ssword\030\002 \002(\t\022,\n\ronline_status\030\003 \002(\0162\025.im"
    ".base.UserStatType\022(\n\013client_type\030\004 \002(\0162"
    "\023.im.base.ClientType\022\026\n\016client_version\030\005"
    " \001(\t\"\266\001\n\nIMLoginRes\022\023\n\013server_time\030\001 \002(\r"
    "\022(\n\013result_code\030\002 \002(\0162\023.im.base.ResultTy"
    "pe\022\025\n\rresult_string\030\003 \001(\t\022,\n\ronline_stat"
    "us\030\004 \001(\0162\025.im.base.UserStatType\022$\n\tuser_"
    "info\030\005 \001(\0132\021.im.base.UserInfo2G\n\016IMLogin"
    "Service\0225\n\007IMLogin\022\024.im.login.IMLoginReq"
    "\032\024.im.login.IMLoginResB\022\n\rcom.antalk.pb\200"
    "\001\001", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "im.login.proto", &protobuf_RegisterTypes);
  IMLoginReq::default_instance_ = new IMLoginReq();
  IMLoginRes::default_instance_ = new IMLoginRes();
  IMLoginReq::default_instance_->InitAsDefaultInstance();
  IMLoginRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2elogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2elogin_2eproto {
  StaticDescriptorInitializer_im_2elogin_2eproto() {
    protobuf_AddDesc_im_2elogin_2eproto();
  }
} static_descriptor_initializer_im_2elogin_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginReq::kUsernameFieldNumber;
const int IMLoginReq::kPasswordFieldNumber;
const int IMLoginReq::kOnlineStatusFieldNumber;
const int IMLoginReq::kClientTypeFieldNumber;
const int IMLoginReq::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginReq::IMLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.login.IMLoginReq)
}

void IMLoginReq::InitAsDefaultInstance() {
}

IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.login.IMLoginReq)
}

void IMLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 1;
  client_type_ = 1;
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginReq::~IMLoginReq() {
  // @@protoc_insertion_point(destructor:im.login.IMLoginReq)
  SharedDtor();
}

void IMLoginReq::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IMLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginReq_descriptor_;
}

const IMLoginReq& IMLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2elogin_2eproto();
  return *default_instance_;
}

IMLoginReq* IMLoginReq::default_instance_ = NULL;

IMLoginReq* IMLoginReq::New(::google::protobuf::Arena* arena) const {
  IMLoginReq* n = new IMLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:im.login.IMLoginReq)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    online_status_ = 1;
    client_type_ = 1;
    if (has_client_version()) {
      client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IMLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.login.IMLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "im.login.IMLoginReq.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "im.login.IMLoginReq.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_status;
        break;
      }

      // required .im.base.UserStatType online_status = 3;
      case 3: {
        if (tag == 24) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::UserStatType_IsValid(value)) {
            set_online_status(static_cast< ::im::base::UserStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_type;
        break;
      }

      // required .im.base.ClientType client_type = 4;
      case 4: {
        if (tag == 32) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::im::base::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_version;
        break;
      }

      // optional string client_version = 5;
      case 5: {
        if (tag == 42) {
         parse_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_version().data(), this->client_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "im.login.IMLoginReq.client_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.login.IMLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.login.IMLoginReq)
  return false;
#undef DO_
}

void IMLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.login.IMLoginReq)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginReq.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required .im.base.UserStatType online_status = 3;
  if (has_online_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_status(), output);
  }

  // required .im.base.ClientType client_type = 4;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // optional string client_version = 5;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginReq.client_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:im.login.IMLoginReq)
}

::google::protobuf::uint8* IMLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:im.login.IMLoginReq)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginReq.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required .im.base.UserStatType online_status = 3;
  if (has_online_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->online_status(), target);
  }

  // required .im.base.ClientType client_type = 4;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->client_type(), target);
  }

  // optional string client_version = 5;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginReq.client_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.login.IMLoginReq)
  return target;
}

int IMLoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:im.login.IMLoginReq)
  int total_size = 0;

  if (has_username()) {
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_online_status()) {
    // required .im.base.UserStatType online_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  if (has_client_type()) {
    // required .im.base.ClientType client_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  return total_size;
}
int IMLoginReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.login.IMLoginReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required .im.base.UserStatType online_status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());

    // required .im.base.ClientType client_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string client_version = 5;
  if (has_client_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.login.IMLoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMLoginReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.login.IMLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.login.IMLoginReq)
    MergeFrom(*source);
  }
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.login.IMLoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_online_status()) {
      set_online_status(from.online_status());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_client_version()) {
      set_has_client_version();
      client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IMLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMLoginReq::Swap(IMLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginReq::InternalSwap(IMLoginReq* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(online_status_, other->online_status_);
  std::swap(client_type_, other->client_type_);
  client_version_.Swap(&other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMLoginReq_descriptor_;
  metadata.reflection = IMLoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginReq

// required string username = 1;
bool IMLoginReq::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMLoginReq::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void IMLoginReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& IMLoginReq::username() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.username)
}
 void IMLoginReq::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginReq.username)
}
 void IMLoginReq::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginReq.username)
}
 ::std::string* IMLoginReq::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginReq.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginReq::release_username() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginReq.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginReq.username)
}

// required string password = 2;
bool IMLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void IMLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.password)
}
 void IMLoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginReq.password)
}
 void IMLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginReq.password)
}
 ::std::string* IMLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginReq.password)
}

// required .im.base.UserStatType online_status = 3;
bool IMLoginReq::has_online_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMLoginReq::set_has_online_status() {
  _has_bits_[0] |= 0x00000004u;
}
void IMLoginReq::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMLoginReq::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
 ::im::base::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.online_status)
  return static_cast< ::im::base::UserStatType >(online_status_);
}
 void IMLoginReq::set_online_status(::im::base::UserStatType value) {
  assert(::im::base::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.online_status)
}

// required .im.base.ClientType client_type = 4;
bool IMLoginReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMLoginReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
void IMLoginReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMLoginReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
 ::im::base::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.client_type)
  return static_cast< ::im::base::ClientType >(client_type_);
}
 void IMLoginReq::set_client_type(::im::base::ClientType value) {
  assert(::im::base::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.client_type)
}

// optional string client_version = 5;
bool IMLoginReq::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMLoginReq::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
void IMLoginReq::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMLoginReq::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
 const ::std::string& IMLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginReq.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginReq.client_version)
}
 void IMLoginReq::set_client_version(const char* value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginReq.client_version)
}
 void IMLoginReq::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginReq.client_version)
}
 ::std::string* IMLoginReq::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginReq.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginReq.client_version)
  clear_has_client_version();
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginReq.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginRes::kServerTimeFieldNumber;
const int IMLoginRes::kResultCodeFieldNumber;
const int IMLoginRes::kResultStringFieldNumber;
const int IMLoginRes::kOnlineStatusFieldNumber;
const int IMLoginRes::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginRes::IMLoginRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.login.IMLoginRes)
}

void IMLoginRes::InitAsDefaultInstance() {
  user_info_ = const_cast< ::im::base::UserInfo*>(&::im::base::UserInfo::default_instance());
}

IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.login.IMLoginRes)
}

void IMLoginRes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_time_ = 0u;
  result_code_ = 0;
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 1;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginRes::~IMLoginRes() {
  // @@protoc_insertion_point(destructor:im.login.IMLoginRes)
  SharedDtor();
}

void IMLoginRes::SharedDtor() {
  result_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete user_info_;
  }
}

void IMLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLoginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginRes_descriptor_;
}

const IMLoginRes& IMLoginRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2elogin_2eproto();
  return *default_instance_;
}

IMLoginRes* IMLoginRes::default_instance_ = NULL;

IMLoginRes* IMLoginRes::New(::google::protobuf::Arena* arena) const {
  IMLoginRes* n = new IMLoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:im.login.IMLoginRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMLoginRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMLoginRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(server_time_, result_code_);
    if (has_result_string()) {
      result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    online_status_ = 1;
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::im::base::UserInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IMLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.login.IMLoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required .im.base.ResultType result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::ResultType_IsValid(value)) {
            set_result_code(static_cast< ::im::base::ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result_string;
        break;
      }

      // optional string result_string = 3;
      case 3: {
        if (tag == 26) {
         parse_result_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result_string().data(), this->result_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "im.login.IMLoginRes.result_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_status;
        break;
      }

      // optional .im.base.UserStatType online_status = 4;
      case 4: {
        if (tag == 32) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::UserStatType_IsValid(value)) {
            set_online_status(static_cast< ::im::base::UserStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_info;
        break;
      }

      // optional .im.base.UserInfo user_info = 5;
      case 5: {
        if (tag == 42) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.login.IMLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.login.IMLoginRes)
  return false;
#undef DO_
}

void IMLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.login.IMLoginRes)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  // required .im.base.ResultType result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_code(), output);
  }

  // optional string result_string = 3;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginRes.result_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_string(), output);
  }

  // optional .im.base.UserStatType online_status = 4;
  if (has_online_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_status(), output);
  }

  // optional .im.base.UserInfo user_info = 5;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:im.login.IMLoginRes)
}

::google::protobuf::uint8* IMLoginRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:im.login.IMLoginRes)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_time(), target);
  }

  // required .im.base.ResultType result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_code(), target);
  }

  // optional string result_string = 3;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "im.login.IMLoginRes.result_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_string(), target);
  }

  // optional .im.base.UserStatType online_status = 4;
  if (has_online_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->online_status(), target);
  }

  // optional .im.base.UserInfo user_info = 5;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->user_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.login.IMLoginRes)
  return target;
}

int IMLoginRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:im.login.IMLoginRes)
  int total_size = 0;

  if (has_server_time()) {
    // required uint32 server_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());
  }

  if (has_result_code()) {
    // required .im.base.ResultType result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  return total_size;
}
int IMLoginRes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.login.IMLoginRes)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 server_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());

    // required .im.base.ResultType result_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional string result_string = 3;
    if (has_result_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_string());
    }

    // optional .im.base.UserStatType online_status = 4;
    if (has_online_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
    }

    // optional .im.base.UserInfo user_info = 5;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:im.login.IMLoginRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMLoginRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMLoginRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:im.login.IMLoginRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:im.login.IMLoginRes)
    MergeFrom(*source);
  }
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.login.IMLoginRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_string()) {
      set_has_result_string();
      result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
    }
    if (from.has_online_status()) {
      set_online_status(from.online_status());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::im::base::UserInfo::MergeFrom(from.user_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IMLoginRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:im.login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void IMLoginRes::Swap(IMLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginRes::InternalSwap(IMLoginRes* other) {
  std::swap(server_time_, other->server_time_);
  std::swap(result_code_, other->result_code_);
  result_string_.Swap(&other->result_string_);
  std::swap(online_status_, other->online_status_);
  std::swap(user_info_, other->user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMLoginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMLoginRes_descriptor_;
  metadata.reflection = IMLoginRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginRes

// required uint32 server_time = 1;
bool IMLoginRes::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IMLoginRes::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
void IMLoginRes::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void IMLoginRes::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
 ::google::protobuf::uint32 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.server_time)
  return server_time_;
}
 void IMLoginRes::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.server_time)
}

// required .im.base.ResultType result_code = 2;
bool IMLoginRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IMLoginRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
void IMLoginRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void IMLoginRes::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
 ::im::base::ResultType IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.result_code)
  return static_cast< ::im::base::ResultType >(result_code_);
}
 void IMLoginRes::set_result_code(::im::base::ResultType value) {
  assert(::im::base::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.result_code)
}

// optional string result_string = 3;
bool IMLoginRes::has_result_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IMLoginRes::set_has_result_string() {
  _has_bits_[0] |= 0x00000004u;
}
void IMLoginRes::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000004u;
}
void IMLoginRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result_string();
}
 const ::std::string& IMLoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.result_string)
  return result_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginRes::set_result_string(const ::std::string& value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.result_string)
}
 void IMLoginRes::set_result_string(const char* value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.login.IMLoginRes.result_string)
}
 void IMLoginRes::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.login.IMLoginRes.result_string)
}
 ::std::string* IMLoginRes::mutable_result_string() {
  set_has_result_string();
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginRes::release_result_string() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginRes.result_string)
  clear_has_result_string();
  return result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    set_has_result_string();
  } else {
    clear_has_result_string();
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginRes.result_string)
}

// optional .im.base.UserStatType online_status = 4;
bool IMLoginRes::has_online_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IMLoginRes::set_has_online_status() {
  _has_bits_[0] |= 0x00000008u;
}
void IMLoginRes::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void IMLoginRes::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
 ::im::base::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.online_status)
  return static_cast< ::im::base::UserStatType >(online_status_);
}
 void IMLoginRes::set_online_status(::im::base::UserStatType value) {
  assert(::im::base::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:im.login.IMLoginRes.online_status)
}

// optional .im.base.UserInfo user_info = 5;
bool IMLoginRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IMLoginRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
void IMLoginRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void IMLoginRes::clear_user_info() {
  if (user_info_ != NULL) user_info_->::im::base::UserInfo::Clear();
  clear_has_user_info();
}
const ::im::base::UserInfo& IMLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:im.login.IMLoginRes.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
::im::base::UserInfo* IMLoginRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::im::base::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:im.login.IMLoginRes.user_info)
  return user_info_;
}
::im::base::UserInfo* IMLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:im.login.IMLoginRes.user_info)
  clear_has_user_info();
  ::im::base::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void IMLoginRes::set_allocated_user_info(::im::base::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:im.login.IMLoginRes.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

IMLoginService::~IMLoginService() {}

const ::google::protobuf::ServiceDescriptor* IMLoginService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* IMLoginService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginService_descriptor_;
}

void IMLoginService::IMLogin(::google::protobuf::RpcController* controller,
                         const ::im::login::IMLoginReq*,
                         ::im::login::IMLoginRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IMLogin() not implemented.");
  done->Run();
}

void IMLoginService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), IMLoginService_descriptor_);
  switch(method->index()) {
    case 0:
      IMLogin(controller,
             ::google::protobuf::down_cast<const ::im::login::IMLoginReq*>(request),
             ::google::protobuf::down_cast< ::im::login::IMLoginRes*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IMLoginService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::im::login::IMLoginReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& IMLoginService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::im::login::IMLoginRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IMLoginService_Stub::IMLoginService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IMLoginService_Stub::IMLoginService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IMLoginService_Stub::~IMLoginService_Stub() {
  if (owns_channel_) delete channel_;
}

void IMLoginService_Stub::IMLogin(::google::protobuf::RpcController* controller,
                              const ::im::login::IMLoginReq* request,
                              ::im::login::IMLoginRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace im

// @@protoc_insertion_point(global_scope)
