// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace im {
namespace login {

namespace {

const ::google::protobuf::Descriptor* IMLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMLoginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMLoginRes_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* IMLoginService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_im_2elogin_2eproto() {
  protobuf_AddDesc_im_2elogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "im.login.proto");
  GOOGLE_CHECK(file != NULL);
  IMLoginReq_descriptor_ = file->message_type(0);
  static const int IMLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, client_version_),
  };
  IMLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMLoginReq_descriptor_,
      IMLoginReq::default_instance_,
      IMLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMLoginReq));
  IMLoginRes_descriptor_ = file->message_type(1);
  static const int IMLoginRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, result_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, user_info_),
  };
  IMLoginRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMLoginRes_descriptor_,
      IMLoginRes::default_instance_,
      IMLoginRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMLoginRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMLoginRes));
  IMLoginService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_im_2elogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMLoginReq_descriptor_, &IMLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMLoginRes_descriptor_, &IMLoginRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_im_2elogin_2eproto() {
  delete IMLoginReq::default_instance_;
  delete IMLoginReq_reflection_;
  delete IMLoginRes::default_instance_;
  delete IMLoginRes_reflection_;
}

void protobuf_AddDesc_im_2elogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::im::base::protobuf_AddDesc_im_2ebase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016im.login.proto\022\010im.login\032\rim.base.prot"
    "o\"\240\001\n\nIMLoginReq\022\020\n\010username\030\001 \002(\t\022\020\n\010pa"
    "ssword\030\002 \002(\t\022,\n\ronline_status\030\003 \002(\0162\025.im"
    ".base.UserStatType\022(\n\013client_type\030\004 \002(\0162"
    "\023.im.base.ClientType\022\026\n\016client_version\030\005"
    " \001(\t\"\266\001\n\nIMLoginRes\022\023\n\013server_time\030\001 \002(\r"
    "\022(\n\013result_code\030\002 \002(\0162\023.im.base.ResultTy"
    "pe\022\025\n\rresult_string\030\003 \001(\t\022,\n\ronline_stat"
    "us\030\004 \001(\0162\025.im.base.UserStatType\022$\n\tuser_"
    "info\030\005 \001(\0132\021.im.base.UserInfo2G\n\016IMLogin"
    "Service\0225\n\007IMLogin\022\024.im.login.IMLoginReq"
    "\032\024.im.login.IMLoginResB\022\n\rcom.antalk.pb\200"
    "\001\001", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "im.login.proto", &protobuf_RegisterTypes);
  IMLoginReq::default_instance_ = new IMLoginReq();
  IMLoginRes::default_instance_ = new IMLoginRes();
  IMLoginReq::default_instance_->InitAsDefaultInstance();
  IMLoginRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2elogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2elogin_2eproto {
  StaticDescriptorInitializer_im_2elogin_2eproto() {
    protobuf_AddDesc_im_2elogin_2eproto();
  }
} static_descriptor_initializer_im_2elogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IMLoginReq::kUsernameFieldNumber;
const int IMLoginReq::kPasswordFieldNumber;
const int IMLoginReq::kOnlineStatusFieldNumber;
const int IMLoginReq::kClientTypeFieldNumber;
const int IMLoginReq::kClientVersionFieldNumber;
#endif  // !_MSC_VER

IMLoginReq::IMLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IMLoginReq::InitAsDefaultInstance() {
}

IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IMLoginReq::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_status_ = 1;
  client_type_ = 1;
  client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginReq::~IMLoginReq() {
  SharedDtor();
}

void IMLoginReq::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (client_version_ != &::google::protobuf::internal::kEmptyString) {
    delete client_version_;
  }
  if (this != default_instance_) {
  }
}

void IMLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginReq_descriptor_;
}

const IMLoginReq& IMLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2elogin_2eproto();
  return *default_instance_;
}

IMLoginReq* IMLoginReq::default_instance_ = NULL;

IMLoginReq* IMLoginReq::New() const {
  return new IMLoginReq;
}

void IMLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    online_status_ = 1;
    client_type_ = 1;
    if (has_client_version()) {
      if (client_version_ != &::google::protobuf::internal::kEmptyString) {
        client_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online_status;
        break;
      }

      // required .im.base.UserStatType online_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::UserStatType_IsValid(value)) {
            set_online_status(static_cast< ::im::base::UserStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_type;
        break;
      }

      // required .im.base.ClientType client_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::im::base::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_client_version;
        break;
      }

      // optional string client_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_version().data(), this->client_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IMLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required .im.base.UserStatType online_status = 3;
  if (has_online_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_status(), output);
  }

  // required .im.base.ClientType client_type = 4;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // optional string client_version = 5;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->client_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IMLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required .im.base.UserStatType online_status = 3;
  if (has_online_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->online_status(), target);
  }

  // required .im.base.ClientType client_type = 4;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->client_type(), target);
  }

  // optional string client_version = 5;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IMLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required .im.base.UserStatType online_status = 3;
    if (has_online_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
    }

    // required .im.base.ClientType client_type = 4;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // optional string client_version = 5;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_online_status()) {
      set_online_status(from.online_status());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMLoginReq::Swap(IMLoginReq* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(online_status_, other->online_status_);
    std::swap(client_type_, other->client_type_);
    std::swap(client_version_, other->client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMLoginReq_descriptor_;
  metadata.reflection = IMLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMLoginRes::kServerTimeFieldNumber;
const int IMLoginRes::kResultCodeFieldNumber;
const int IMLoginRes::kResultStringFieldNumber;
const int IMLoginRes::kOnlineStatusFieldNumber;
const int IMLoginRes::kUserInfoFieldNumber;
#endif  // !_MSC_VER

IMLoginRes::IMLoginRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IMLoginRes::InitAsDefaultInstance() {
  user_info_ = const_cast< ::im::base::UserInfo*>(&::im::base::UserInfo::default_instance());
}

IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IMLoginRes::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0u;
  result_code_ = 0;
  result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_status_ = 1;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMLoginRes::~IMLoginRes() {
  SharedDtor();
}

void IMLoginRes::SharedDtor() {
  if (result_string_ != &::google::protobuf::internal::kEmptyString) {
    delete result_string_;
  }
  if (this != default_instance_) {
    delete user_info_;
  }
}

void IMLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLoginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginRes_descriptor_;
}

const IMLoginRes& IMLoginRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2elogin_2eproto();
  return *default_instance_;
}

IMLoginRes* IMLoginRes::default_instance_ = NULL;

IMLoginRes* IMLoginRes::New() const {
  return new IMLoginRes;
}

void IMLoginRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_time_ = 0u;
    result_code_ = 0;
    if (has_result_string()) {
      if (result_string_ != &::google::protobuf::internal::kEmptyString) {
        result_string_->clear();
      }
    }
    online_status_ = 1;
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::im::base::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required .im.base.ResultType result_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::ResultType_IsValid(value)) {
            set_result_code(static_cast< ::im::base::ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_string;
        break;
      }

      // optional string result_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_string().data(), this->result_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online_status;
        break;
      }

      // optional .im.base.UserStatType online_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::base::UserStatType_IsValid(value)) {
            set_online_status(static_cast< ::im::base::UserStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_info;
        break;
      }

      // optional .im.base.UserInfo user_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IMLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  // required .im.base.ResultType result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_code(), output);
  }

  // optional string result_string = 3;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result_string(), output);
  }

  // optional .im.base.UserStatType online_status = 4;
  if (has_online_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_status(), output);
  }

  // optional .im.base.UserInfo user_info = 5;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IMLoginRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_time(), target);
  }

  // required .im.base.ResultType result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_code(), target);
  }

  // optional string result_string = 3;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_string(), target);
  }

  // optional .im.base.UserStatType online_status = 4;
  if (has_online_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->online_status(), target);
  }

  // optional .im.base.UserInfo user_info = 5;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IMLoginRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

    // required .im.base.ResultType result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // optional string result_string = 3;
    if (has_result_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_string());
    }

    // optional .im.base.UserStatType online_status = 4;
    if (has_online_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
    }

    // optional .im.base.UserInfo user_info = 5;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMLoginRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMLoginRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_string()) {
      set_result_string(from.result_string());
    }
    if (from.has_online_status()) {
      set_online_status(from.online_status());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::im::base::UserInfo::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMLoginRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void IMLoginRes::Swap(IMLoginRes* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_string_, other->result_string_);
    std::swap(online_status_, other->online_status_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMLoginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMLoginRes_descriptor_;
  metadata.reflection = IMLoginRes_reflection_;
  return metadata;
}


// ===================================================================

IMLoginService::~IMLoginService() {}

const ::google::protobuf::ServiceDescriptor* IMLoginService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* IMLoginService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMLoginService_descriptor_;
}

void IMLoginService::IMLogin(::google::protobuf::RpcController* controller,
                         const ::im::login::IMLoginReq*,
                         ::im::login::IMLoginRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IMLogin() not implemented.");
  done->Run();
}

void IMLoginService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), IMLoginService_descriptor_);
  switch(method->index()) {
    case 0:
      IMLogin(controller,
             ::google::protobuf::down_cast<const ::im::login::IMLoginReq*>(request),
             ::google::protobuf::down_cast< ::im::login::IMLoginRes*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IMLoginService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::im::login::IMLoginReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& IMLoginService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::im::login::IMLoginRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

IMLoginService_Stub::IMLoginService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IMLoginService_Stub::IMLoginService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IMLoginService_Stub::~IMLoginService_Stub() {
  if (owns_channel_) delete channel_;
}

void IMLoginService_Stub::IMLogin(::google::protobuf::RpcController* controller,
                              const ::im::login::IMLoginReq* request,
                              ::im::login::IMLoginRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace im

// @@protoc_insertion_point(global_scope)
