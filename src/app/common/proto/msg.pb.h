// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSendMsgReqImpl();
void InitDefaultsSendMsgReq();
void InitDefaultsSendMsgRespImpl();
void InitDefaultsSendMsgResp();
inline void InitDefaults() {
  InitDefaultsSendMsgReq();
  InitDefaultsSendMsgResp();
}
}  // namespace protobuf_msg_2eproto
namespace antalk {
namespace msg {
class SendMsgReq;
class SendMsgReqDefaultTypeInternal;
extern SendMsgReqDefaultTypeInternal _SendMsgReq_default_instance_;
class SendMsgResp;
class SendMsgRespDefaultTypeInternal;
extern SendMsgRespDefaultTypeInternal _SendMsgResp_default_instance_;
}  // namespace msg
}  // namespace antalk
namespace antalk {
namespace msg {

// ===================================================================

class SendMsgReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:antalk.msg.SendMsgReq) */ {
 public:
  SendMsgReq();
  virtual ~SendMsgReq();

  SendMsgReq(const SendMsgReq& from);

  inline SendMsgReq& operator=(const SendMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMsgReq(SendMsgReq&& from) noexcept
    : SendMsgReq() {
    *this = ::std::move(from);
  }

  inline SendMsgReq& operator=(SendMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMsgReq* internal_default_instance() {
    return reinterpret_cast<const SendMsgReq*>(
               &_SendMsgReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SendMsgReq* other);
  friend void swap(SendMsgReq& a, SendMsgReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMsgReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SendMsgReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendMsgReq& from);
  void MergeFrom(const SendMsgReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendMsgReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string send_uid = 1;
  bool has_send_uid() const;
  void clear_send_uid();
  static const int kSendUidFieldNumber = 1;
  const ::std::string& send_uid() const;
  void set_send_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_send_uid(::std::string&& value);
  #endif
  void set_send_uid(const char* value);
  void set_send_uid(const char* value, size_t size);
  ::std::string* mutable_send_uid();
  ::std::string* release_send_uid();
  void set_allocated_send_uid(::std::string* send_uid);

  // optional string recv_uid = 2;
  bool has_recv_uid() const;
  void clear_recv_uid();
  static const int kRecvUidFieldNumber = 2;
  const ::std::string& recv_uid() const;
  void set_recv_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_recv_uid(::std::string&& value);
  #endif
  void set_recv_uid(const char* value);
  void set_recv_uid(const char* value, size_t size);
  ::std::string* mutable_recv_uid();
  ::std::string* release_recv_uid();
  void set_allocated_recv_uid(::std::string* recv_uid);

  // optional string msg_type = 4;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  const ::std::string& msg_type() const;
  void set_msg_type(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_type(::std::string&& value);
  #endif
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  ::std::string* mutable_msg_type();
  ::std::string* release_msg_type();
  void set_allocated_msg_type(::std::string* msg_type);

  // optional string msg_body = 5;
  bool has_msg_body() const;
  void clear_msg_body();
  static const int kMsgBodyFieldNumber = 5;
  const ::std::string& msg_body() const;
  void set_msg_body(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_body(::std::string&& value);
  #endif
  void set_msg_body(const char* value);
  void set_msg_body(const char* value, size_t size);
  ::std::string* mutable_msg_body();
  ::std::string* release_msg_body();
  void set_allocated_msg_body(::std::string* msg_body);

  // optional string attachment = 6;
  bool has_attachment() const;
  void clear_attachment();
  static const int kAttachmentFieldNumber = 6;
  const ::std::string& attachment() const;
  void set_attachment(const ::std::string& value);
  #if LANG_CXX11
  void set_attachment(::std::string&& value);
  #endif
  void set_attachment(const char* value);
  void set_attachment(const char* value, size_t size);
  ::std::string* mutable_attachment();
  ::std::string* release_attachment();
  void set_allocated_attachment(::std::string* attachment);

  // optional int64 msg_id = 3;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::int64 msg_id() const;
  void set_msg_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:antalk.msg.SendMsgReq)
 private:
  void set_has_send_uid();
  void clear_has_send_uid();
  void set_has_recv_uid();
  void clear_has_recv_uid();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_msg_type();
  void clear_has_msg_type();
  void set_has_msg_body();
  void clear_has_msg_body();
  void set_has_attachment();
  void clear_has_attachment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr send_uid_;
  ::google::protobuf::internal::ArenaStringPtr recv_uid_;
  ::google::protobuf::internal::ArenaStringPtr msg_type_;
  ::google::protobuf::internal::ArenaStringPtr msg_body_;
  ::google::protobuf::internal::ArenaStringPtr attachment_;
  ::google::protobuf::int64 msg_id_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
  friend void ::protobuf_msg_2eproto::InitDefaultsSendMsgReqImpl();
};
// -------------------------------------------------------------------

class SendMsgResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:antalk.msg.SendMsgResp) */ {
 public:
  SendMsgResp();
  virtual ~SendMsgResp();

  SendMsgResp(const SendMsgResp& from);

  inline SendMsgResp& operator=(const SendMsgResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMsgResp(SendMsgResp&& from) noexcept
    : SendMsgResp() {
    *this = ::std::move(from);
  }

  inline SendMsgResp& operator=(SendMsgResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMsgResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMsgResp* internal_default_instance() {
    return reinterpret_cast<const SendMsgResp*>(
               &_SendMsgResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SendMsgResp* other);
  friend void swap(SendMsgResp& a, SendMsgResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMsgResp* New() const PROTOBUF_FINAL { return New(NULL); }

  SendMsgResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendMsgResp& from);
  void MergeFrom(const SendMsgResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendMsgResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msg_id = 1;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int64 msg_id() const;
  void set_msg_id(::google::protobuf::int64 value);

  // optional .antalk.common.ResultType result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::antalk::common::ResultType result_code() const;
  void set_result_code(::antalk::common::ResultType value);

  // @@protoc_insertion_point(class_scope:antalk.msg.SendMsgResp)
 private:
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_result_code();
  void clear_has_result_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 msg_id_;
  int result_code_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
  friend void ::protobuf_msg_2eproto::InitDefaultsSendMsgRespImpl();
};
// ===================================================================

class MsgService_Stub;

class MsgService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MsgService() {};
 public:
  virtual ~MsgService();

  typedef MsgService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void SendMsg(::google::protobuf::RpcController* controller,
                       const ::antalk::msg::SendMsgReq* request,
                       ::antalk::msg::SendMsgResp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgService);
};

class MsgService_Stub : public MsgService {
 public:
  MsgService_Stub(::google::protobuf::RpcChannel* channel);
  MsgService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MsgService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MsgService ------------------------------------------

  void SendMsg(::google::protobuf::RpcController* controller,
                       const ::antalk::msg::SendMsgReq* request,
                       ::antalk::msg::SendMsgResp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendMsgReq

// optional string send_uid = 1;
inline bool SendMsgReq::has_send_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMsgReq::set_has_send_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMsgReq::clear_has_send_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMsgReq::clear_send_uid() {
  send_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_send_uid();
}
inline const ::std::string& SendMsgReq::send_uid() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgReq.send_uid)
  return send_uid_.GetNoArena();
}
inline void SendMsgReq::set_send_uid(const ::std::string& value) {
  set_has_send_uid();
  send_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgReq.send_uid)
}
#if LANG_CXX11
inline void SendMsgReq::set_send_uid(::std::string&& value) {
  set_has_send_uid();
  send_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:antalk.msg.SendMsgReq.send_uid)
}
#endif
inline void SendMsgReq::set_send_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_send_uid();
  send_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:antalk.msg.SendMsgReq.send_uid)
}
inline void SendMsgReq::set_send_uid(const char* value, size_t size) {
  set_has_send_uid();
  send_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:antalk.msg.SendMsgReq.send_uid)
}
inline ::std::string* SendMsgReq::mutable_send_uid() {
  set_has_send_uid();
  // @@protoc_insertion_point(field_mutable:antalk.msg.SendMsgReq.send_uid)
  return send_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMsgReq::release_send_uid() {
  // @@protoc_insertion_point(field_release:antalk.msg.SendMsgReq.send_uid)
  clear_has_send_uid();
  return send_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMsgReq::set_allocated_send_uid(::std::string* send_uid) {
  if (send_uid != NULL) {
    set_has_send_uid();
  } else {
    clear_has_send_uid();
  }
  send_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_uid);
  // @@protoc_insertion_point(field_set_allocated:antalk.msg.SendMsgReq.send_uid)
}

// optional string recv_uid = 2;
inline bool SendMsgReq::has_recv_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMsgReq::set_has_recv_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMsgReq::clear_has_recv_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMsgReq::clear_recv_uid() {
  recv_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recv_uid();
}
inline const ::std::string& SendMsgReq::recv_uid() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgReq.recv_uid)
  return recv_uid_.GetNoArena();
}
inline void SendMsgReq::set_recv_uid(const ::std::string& value) {
  set_has_recv_uid();
  recv_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgReq.recv_uid)
}
#if LANG_CXX11
inline void SendMsgReq::set_recv_uid(::std::string&& value) {
  set_has_recv_uid();
  recv_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:antalk.msg.SendMsgReq.recv_uid)
}
#endif
inline void SendMsgReq::set_recv_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recv_uid();
  recv_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:antalk.msg.SendMsgReq.recv_uid)
}
inline void SendMsgReq::set_recv_uid(const char* value, size_t size) {
  set_has_recv_uid();
  recv_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:antalk.msg.SendMsgReq.recv_uid)
}
inline ::std::string* SendMsgReq::mutable_recv_uid() {
  set_has_recv_uid();
  // @@protoc_insertion_point(field_mutable:antalk.msg.SendMsgReq.recv_uid)
  return recv_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMsgReq::release_recv_uid() {
  // @@protoc_insertion_point(field_release:antalk.msg.SendMsgReq.recv_uid)
  clear_has_recv_uid();
  return recv_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMsgReq::set_allocated_recv_uid(::std::string* recv_uid) {
  if (recv_uid != NULL) {
    set_has_recv_uid();
  } else {
    clear_has_recv_uid();
  }
  recv_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_uid);
  // @@protoc_insertion_point(field_set_allocated:antalk.msg.SendMsgReq.recv_uid)
}

// optional int64 msg_id = 3;
inline bool SendMsgReq::has_msg_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendMsgReq::set_has_msg_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendMsgReq::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendMsgReq::clear_msg_id() {
  msg_id_ = GOOGLE_LONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::int64 SendMsgReq::msg_id() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgReq.msg_id)
  return msg_id_;
}
inline void SendMsgReq::set_msg_id(::google::protobuf::int64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgReq.msg_id)
}

// optional string msg_type = 4;
inline bool SendMsgReq::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMsgReq::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMsgReq::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMsgReq::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}
inline const ::std::string& SendMsgReq::msg_type() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgReq.msg_type)
  return msg_type_.GetNoArena();
}
inline void SendMsgReq::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgReq.msg_type)
}
#if LANG_CXX11
inline void SendMsgReq::set_msg_type(::std::string&& value) {
  set_has_msg_type();
  msg_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:antalk.msg.SendMsgReq.msg_type)
}
#endif
inline void SendMsgReq::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:antalk.msg.SendMsgReq.msg_type)
}
inline void SendMsgReq::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:antalk.msg.SendMsgReq.msg_type)
}
inline ::std::string* SendMsgReq::mutable_msg_type() {
  set_has_msg_type();
  // @@protoc_insertion_point(field_mutable:antalk.msg.SendMsgReq.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMsgReq::release_msg_type() {
  // @@protoc_insertion_point(field_release:antalk.msg.SendMsgReq.msg_type)
  clear_has_msg_type();
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMsgReq::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    set_has_msg_type();
  } else {
    clear_has_msg_type();
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:antalk.msg.SendMsgReq.msg_type)
}

// optional string msg_body = 5;
inline bool SendMsgReq::has_msg_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMsgReq::set_has_msg_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMsgReq::clear_has_msg_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMsgReq::clear_msg_body() {
  msg_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_body();
}
inline const ::std::string& SendMsgReq::msg_body() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgReq.msg_body)
  return msg_body_.GetNoArena();
}
inline void SendMsgReq::set_msg_body(const ::std::string& value) {
  set_has_msg_body();
  msg_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgReq.msg_body)
}
#if LANG_CXX11
inline void SendMsgReq::set_msg_body(::std::string&& value) {
  set_has_msg_body();
  msg_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:antalk.msg.SendMsgReq.msg_body)
}
#endif
inline void SendMsgReq::set_msg_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_body();
  msg_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:antalk.msg.SendMsgReq.msg_body)
}
inline void SendMsgReq::set_msg_body(const char* value, size_t size) {
  set_has_msg_body();
  msg_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:antalk.msg.SendMsgReq.msg_body)
}
inline ::std::string* SendMsgReq::mutable_msg_body() {
  set_has_msg_body();
  // @@protoc_insertion_point(field_mutable:antalk.msg.SendMsgReq.msg_body)
  return msg_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMsgReq::release_msg_body() {
  // @@protoc_insertion_point(field_release:antalk.msg.SendMsgReq.msg_body)
  clear_has_msg_body();
  return msg_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMsgReq::set_allocated_msg_body(::std::string* msg_body) {
  if (msg_body != NULL) {
    set_has_msg_body();
  } else {
    clear_has_msg_body();
  }
  msg_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_body);
  // @@protoc_insertion_point(field_set_allocated:antalk.msg.SendMsgReq.msg_body)
}

// optional string attachment = 6;
inline bool SendMsgReq::has_attachment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendMsgReq::set_has_attachment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendMsgReq::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendMsgReq::clear_attachment() {
  attachment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attachment();
}
inline const ::std::string& SendMsgReq::attachment() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgReq.attachment)
  return attachment_.GetNoArena();
}
inline void SendMsgReq::set_attachment(const ::std::string& value) {
  set_has_attachment();
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgReq.attachment)
}
#if LANG_CXX11
inline void SendMsgReq::set_attachment(::std::string&& value) {
  set_has_attachment();
  attachment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:antalk.msg.SendMsgReq.attachment)
}
#endif
inline void SendMsgReq::set_attachment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attachment();
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:antalk.msg.SendMsgReq.attachment)
}
inline void SendMsgReq::set_attachment(const char* value, size_t size) {
  set_has_attachment();
  attachment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:antalk.msg.SendMsgReq.attachment)
}
inline ::std::string* SendMsgReq::mutable_attachment() {
  set_has_attachment();
  // @@protoc_insertion_point(field_mutable:antalk.msg.SendMsgReq.attachment)
  return attachment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMsgReq::release_attachment() {
  // @@protoc_insertion_point(field_release:antalk.msg.SendMsgReq.attachment)
  clear_has_attachment();
  return attachment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMsgReq::set_allocated_attachment(::std::string* attachment) {
  if (attachment != NULL) {
    set_has_attachment();
  } else {
    clear_has_attachment();
  }
  attachment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attachment);
  // @@protoc_insertion_point(field_set_allocated:antalk.msg.SendMsgReq.attachment)
}

// -------------------------------------------------------------------

// SendMsgResp

// optional int64 msg_id = 1;
inline bool SendMsgResp::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMsgResp::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMsgResp::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMsgResp::clear_msg_id() {
  msg_id_ = GOOGLE_LONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::int64 SendMsgResp::msg_id() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgResp.msg_id)
  return msg_id_;
}
inline void SendMsgResp::set_msg_id(::google::protobuf::int64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgResp.msg_id)
}

// optional .antalk.common.ResultType result_code = 2;
inline bool SendMsgResp::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMsgResp::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMsgResp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMsgResp::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::antalk::common::ResultType SendMsgResp::result_code() const {
  // @@protoc_insertion_point(field_get:antalk.msg.SendMsgResp.result_code)
  return static_cast< ::antalk::common::ResultType >(result_code_);
}
inline void SendMsgResp::set_result_code(::antalk::common::ResultType value) {
  assert(::antalk::common::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:antalk.msg.SendMsgResp.result_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace antalk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
